# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hULln8nG1Jr8ZA8-VxTiORVqSzXjktf
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from tensorflow.keras.models import load_model
from datetime import datetime

# ---------------- Load model and scalers ----------------
model = load_model("rainfall_lstm_model.h5")
feature_scaler = joblib.load("feature_scaler.pkl")
target_scaler = joblib.load("target_scaler.pkl")

# ---------------- Load and preprocess live data ----------------
# Load your live or recent CSV data
recent_df = pd.read_csv('/content/Corrected_Rainfall - Corrected_Rainfall.csv.csv', parse_dates=["date"], index_col="date")

# Ensure required raw columns exist
required_raw_cols = ["rainfall", "humidity", "windspeed", "temparature", "cloud"]
for col in required_raw_cols:
    if col not in recent_df.columns:
        recent_df[col] = 0  # or a domain-specific default like mean or median

# ---------------- Feature Engineering (MATCHING TRAINING) ----------------
# Lag features
recent_df["rainfall_lag_1"] = recent_df["rainfall"].shift(1)
recent_df["rainfall_lag_3"] = recent_df["rainfall"].shift(3)
recent_df["rainfall_lag_7"] = recent_df["rainfall"].shift(7)
recent_df["humidity_lag_1"] = recent_df["humidity"].shift(1)
recent_df["windspeed_lag_1"] = recent_df["windspeed"].shift(1)
recent_df["temparature_lag_1"] = recent_df["temparature"].shift(1)

# Rolling averages
recent_df["rainfall_rolling_3"] = recent_df["rainfall"].rolling(window=3).mean()
recent_df["humidity_rolling_3"] = recent_df["humidity"].rolling(window=3).mean()
recent_df["cloud_rolling_3"] = recent_df["cloud"].rolling(window=3).mean()

# Date-based features
recent_df["month"] = recent_df.index.month
recent_df["dayofweek"] = recent_df.index.dayofweek

# Drop rows with NaNs caused by shifting and rolling
recent_df.dropna(inplace=True)

# ---------------- Define features (must match training) ----------------
features = [
    "rainfall_lag_1", "rainfall_lag_3", "rainfall_lag_7",
    "humidity_lag_1", "windspeed_lag_1", "temparature_lag_1",
    "rainfall_rolling_3", "humidity_rolling_3", "cloud_rolling_3",
    "month", "dayofweek"
]

# Final data for prediction
X_live = recent_df[features].copy()
X_scaled = feature_scaler.transform(X_live)

# ---------------- Prediction ----------------
y_pred_scaled = model.predict(X_scaled)
y_pred = target_scaler.inverse_transform(y_pred_scaled)

# ---------------- Streamlit UI ----------------
st.set_page_config(page_title="Real-Time Rainfall Predictor", page_icon="🌧️")

st.title("🌧️ Real-Time Rainfall Prediction App")
st.write("This app predicts **next-day rainfall** using recent weather data and an LSTM model.")

st.subheader("Latest Prediction")
latest_pred = y_pred[-1][0] if len(y_pred) > 0 else 0
st.metric(label="Predicted Rainfall (mm)", value=f"{latest_pred:.2f}")

st.subheader("Recent Input Features Used")
st.dataframe(recent_df[features].tail(5))

# Optional: show full prediction trend
with st.expander("📈 See full prediction timeline"):
    result_df = recent_df.copy()
    result_df["Predicted Rainfall"] = y_pred
    st.line_chart(result_df[["rainfall", "Predicted Rainfall"]])