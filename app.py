# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hULln8nG1Jr8ZA8-VxTiORVqSzXjktf
"""


import streamlit as st
import pandas as pd
import joblib
import numpy as np
import matplotlib.pyplot as plt

# Load model
model = joblib.load("rainfall_model.h5")

# Define preprocessing pipeline
def preprocess(df):
    if 'Rainfall(mm)' in df.columns:
        df.rename(columns={'Rainfall(mm)': 'rainfall'}, inplace=True)

    if 'rainfall' not in df.columns:
        raise ValueError("Expected column 'rainfall' not found.")

    df['rainfall'] = df['rainfall'].fillna(method='ffill')
    df['rainfall_lag_1'] = df['rainfall'].shift(1)
    df.dropna(inplace=True)
    return df

# Streamlit UI
st.set_page_config(page_title="Rainfall Prediction", layout="centered")
st.title("🌧️ Rainfall Prediction App")
st.markdown("Upload your rainfall data file to see the predictions 📊")

uploaded_file = st.file_uploader("📂 Upload CSV file", type="csv")

if uploaded_file is not None:
    try:
        # Load and preprocess
        raw_df = pd.read_csv(uploaded_file)
        processed_df = preprocess(raw_df)

        # Predict
        predictions = model.predict(processed_df[["rainfall_lag_1"]])
        processed_df['Predicted_Rainfall'] = predictions

        # Show table
        st.subheader("📋 Predicted Rainfall Results")
        st.dataframe(processed_df[['rainfall', 'rainfall_lag_1', 'Predicted_Rainfall']])

        # Show summary
        avg_actual = round(processed_df['rainfall'].mean(), 2)
        avg_pred = round(processed_df['Predicted_Rainfall'].mean(), 2)

        st.markdown(f"""
        ### 📈 Summary:
        - **Average Actual Rainfall:** {avg_actual} mm  
        - **Average Predicted Rainfall:** {avg_pred} mm
        """)

        # Line Chart
        st.subheader("📉 Rainfall Prediction vs Actual")
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(processed_df.index, processed_df['rainfall'], label='🌧️ Actual Rainfall', color='blue', linestyle='--')
        ax.plot(processed_df.index, processed_df['Predicted_Rainfall'], label='🤖 Predicted Rainfall', color='green')
        ax.set_title('Comparison of Predicted and Actual Rainfall')
        ax.set_xlabel("Time (Index)")
        ax.set_ylabel("Rainfall (mm)")
        ax.legend()
        ax.grid(True)

        st.pyplot(fig)

        st.markdown("✅ This graph compares the **real rainfall values** with the **predicted values** over time. It helps identify where the model is doing well and where it might be off.")

    except Exception as e:
        st.error(f"❌ Error: {e}")
