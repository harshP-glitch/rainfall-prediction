# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hULln8nG1Jr8ZA8-VxTiORVqSzXjktf
"""


import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
import joblib
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from datetime import datetime

# Title
st.title("🌧️ Rainfall Prediction using LSTM")
st.markdown("Upload recent weather data (CSV format) to predict upcoming rainfall.")

# File uploader
uploaded_file = st.file_uploader("📁 Upload your CSV", type="csv")

# Load model and preprocessing objects
@st.cache_resource
def load_all_components():
    model = load_model("rainfall.h5")
    feature_scaler = joblib.load("feature_scaler.pkl")
    target_scaler = joblib.load("target_scaler (1).pkl")
    features = joblib.load("features.pkl")
    return model, feature_scaler, target_scaler, features

model, feature_scaler, target_scaler, features = load_all_components()

# On upload
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # Validate columns
    if not set(features).issubset(df.columns):
        st.error("Uploaded file is missing required input features used during training.")
    else:
        try:
            # Preprocess
            X = df[features]
            X_scaled = feature_scaler.transform(X)

            # Predict
            y_pred_scaled = model.predict(X_scaled)
            y_pred = target_scaler.inverse_transform(y_pred_scaled).flatten()

            df["Predicted_Rainfall"] = y_pred

            # Show predictions
            st.subheader("📊 Predicted Rainfall Data")
            st.dataframe(df[features + ["Predicted_Rainfall"]].head(20))

            # Plot
            st.subheader("📈 Rainfall Prediction Trend")
            fig, ax = plt.subplots(figsize=(12, 5))
            ax.plot(y_pred, marker='o', linestyle='-', label="Predicted Rainfall")

            # Color by intensity
            for i, rain in enumerate(y_pred):
                color = '#90ee90' if rain < 20 else '#f4d03f' if rain < 50 else '#e74c3c'
                ax.scatter(i, rain, color=color)

            ax.set_title("Predicted Rainfall Over Time")
            ax.set_xlabel("Data Point Index")
            ax.set_ylabel("Rainfall (mm)")
            ax.grid(True)
            st.pyplot(fig)

            # Explanation
            st.markdown("""
            **🧠 Graph Explanation:**  
            - This line shows the predicted rainfall in millimeters for each input row.  
            - 🟢 Green: Light rainfall  
            - 🟡 Yellow: Moderate rainfall  
            - 🔴 Red: Heavy rainfall (watch out!)  
            """)

            # Optional: Compare with actual
            if "Actual_Rainfall" in df.columns:
                st.subheader("📉 Actual vs Predicted Rainfall")
                fig2, ax2 = plt.subplots(figsize=(12, 4))
                ax2.plot(df["Actual_Rainfall"].values, label="Actual", linestyle='--', marker='o')
                ax2.plot(df["Predicted_Rainfall"].values, label="Predicted", linestyle='-', marker='x')
                ax2.set_title("Actual vs Predicted Rainfall")
                ax2.set_xlabel("Data Point Index")
                ax2.set_ylabel("Rainfall (mm)")
                ax2.legend()
                ax2.grid(True)
                st.pyplot(fig2)

            # Download
            csv = df.to_csv(index=False)
            st.download_button("📥 Download CSV with Predictions", csv, "predicted_rainfall.csv", "text/csv")

        except Exception as e:
            st.error(f"Something went wrong: {e}")


