# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hULln8nG1Jr8ZA8-VxTiORVqSzXjktf
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import joblib
from keras.models import load_model

# Load assets
model = load_model('rainfall.h5')
feature_scaler = joblib.load('feature_scaler.pkl')
target_scaler = joblib.load('target_scaler (1).pkl')
features = joblib.load('features.pkl')
data = pd.read_csv('Corrected_Rainfall - Corrected_Rainfall.csv.csv')

# UI Header
st.title("üåßÔ∏è Rainfall Prediction Dashboard")
st.markdown("Analyze historical rainfall data and explore future forecasts interactively.")

# User input
st.sidebar.header("üîç Forecast Parameters")
city = st.sidebar.selectbox("Select City", data['City'].unique())
months = st.sidebar.slider("Months to Predict", min_value=1, max_value=24, value=6)

# Filter data
city_data = data[data['City'] == city].copy()
city_data = city_data.sort_values(by='Date')

# Display historical data
st.subheader(f"üìä Historical Rainfall in {city}")
fig_hist = px.line(city_data, x='Date', y='Rainfall', title='Historical Rainfall',
                   labels={'Rainfall': 'Rainfall (mm)'})
st.plotly_chart(fig_hist, use_container_width=True)

# Prepare features for prediction
X = city_data[features].values
timesteps = 60
X_seq = []
for i in range(timesteps, len(X)):
    X_seq.append(X[i - timesteps:i])

X_seq = np.array(X_seq)
X_scaled = feature_scaler.transform(X.reshape(-1, X.shape[-1])).reshape(X.shape)

# Predict future
future_input = X_scaled[-timesteps:].reshape(1, timesteps, -1)
predictions = []

for _ in range(months):
    pred = model.predict(future_input)[0]
    predictions.append(pred)
    new_input = np.append(future_input[0][1:], [pred], axis=0)
    future_input = new_input.reshape(1, timesteps, -1)

# Inverse scale
rainfall_pred = target_scaler.inverse_transform(np.array(predictions))

# Future dates
last_date = pd.to_datetime(city_data['Date'].iloc[-1])
future_dates = pd.date_range(start=last_date + pd.Timedelta(days=30), periods=months, freq='M')

# Dataframe for display
forecast_df = pd.DataFrame({
    'Date': future_dates,
    'Predicted Rainfall': rainfall_pred.flatten()
})

# Show prediction chart
st.subheader("üìà Forecasted Rainfall")
fig_pred = go.Figure()
fig_pred.add_trace(go.Scatter(x=forecast_df['Date'], y=forecast_df['Predicted Rainfall'],
                              mode='lines+markers', name='Prediction',
                              hovertemplate='Date: %{x}<br>Predicted Rainfall: %{y:.2f} mm'))
fig_pred.update_layout(title="Future Rainfall Prediction",
                       xaxis_title="Date",
                       yaxis_title="Predicted Rainfall (mm)",
                       hovermode='x')
st.plotly_chart(fig_pred, use_container_width=True)

# Drilldown Table
with st.expander("üîé View Forecast Table"):
    st.dataframe(forecast_df.style.format({"Predicted Rainfall": "{:.2f}"}))
