# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hULln8nG1Jr8ZA8-VxTiORVqSzXjktf
"""


import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
import io

# Title
st.title("🌧️ Rainfall Prediction using LSTM")
st.markdown("Upload recent weather data (CSV format) to predict upcoming rainfall.")

# File uploader
uploaded_file = st.file_uploader("📁 Upload your CSV", type="csv")

# Load model and preprocessors
@st.cache_resource
def load_all_components():
    model = load_model("rainfall.h5")
    feature_scaler = joblib.load("feature_scaler.pkl")
    target_scaler = joblib.load("target_scaler(1).pkl")
    features = joblib.load("features.pkl")
    return model, feature_scaler, target_scaler, features

model, feature_scaler, target_scaler, features = load_all_components()

# On file upload
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    if not set(features).issubset(df.columns):
        st.error("Uploaded file is missing required input features used during training.")
    else:
        X = df[features]
        X_scaled = feature_scaler.transform(X)
        y_pred_scaled = model.predict(X_scaled)
        y_pred = target_scaler.inverse_transform(y_pred_scaled).flatten()

        df["Predicted_Rainfall"] = y_pred

        # Show prediction table
        st.subheader("📊 Predicted Rainfall Data (first 20 rows)")
        st.dataframe(df[features + ["Predicted_Rainfall"]].head(20))

        # Visualization: Rainfall with color-coded intensities
        st.subheader("📈 Rainfall Prediction Trend")
        fig, ax = plt.subplots(figsize=(12, 5))

        colors = ['#90ee90' if rain < 20 else '#f4d03f' if rain < 50 else '#e74c3c' for rain in y_pred]

        sns.lineplot(x=np.arange(len(y_pred)), y=y_pred, marker="o", palette=colors, label="Predicted Rainfall", ax=ax)
        ax.set_title("Predicted Rainfall Over Time")
        ax.set_xlabel("Data Point Index")
        ax.set_ylabel("Rainfall (mm)")
        ax.grid(True)
        st.pyplot(fig)

        # Explanation
        st.markdown("""
        **🧠 Graph Explanation:**  
        - This line shows the predicted rainfall in millimeters for each input row.  
        - 🔵 Blue/green dots indicate low rainfall (safe weather).  
        - 🟡 Yellow shows moderate rainfall warning.  
        - 🔴 Red signals heavy rainfall alerts — potential for floods or travel disruptions.  
        """)

        # Optional: If actual values present
        if "Actual_Rainfall" in df.columns:
            st.subheader("📉 Actual vs Predicted Rainfall")
            fig2, ax2 = plt.subplots(figsize=(12, 4))
            ax2.plot(df["Actual_Rainfall"].values, label="Actual", linestyle='--', marker='o')
            ax2.plot(df["Predicted_Rainfall"].values, label="Predicted", linestyle='-', marker='x')
            ax2.set_title("Actual vs Predicted Rainfall")
            ax2.set_xlabel("Data Point Index")
            ax2.set_ylabel("Rainfall (mm)")
            ax2.legend()
            ax2.grid(True)
            st.pyplot(fig2)

        # Downloadable predictions
        st.subheader("📥 Download Predictions")
        csv = df.to_csv(index=False)
        st.download_button("Download CSV with Predictions", csv, "predicted_rainfall.csv", "text/csv")
