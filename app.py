# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hULln8nG1Jr8ZA8-VxTiORVqSzXjktf
"""
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from datetime import timedelta

# Example placeholders - replace with your real model input and outputs
# df should have: Date, Actual, Predicted, Forecast, Temp, Humidity, WindSpeed, etc.
# Let's simulate some dummy data for the structure:

def simulate_data():
    dates = pd.date_range(start='2023-01-01', periods=100)
    forecast_dates = pd.date_range(start=dates[-1] + timedelta(days=1), periods=30)
    actual = np.random.rand(100) * 100
    predicted = actual + np.random.randn(100) * 5
    forecast = predicted[-1] + np.cumsum(np.random.randn(30) * 3)

    df_actual = pd.DataFrame({
        'Date': dates,
        'Actual': actual,
        'Predicted': predicted,
        'Temp': np.random.uniform(20, 35, 100),
        'Humidity': np.random.uniform(60, 90, 100),
        'WindSpeed': np.random.uniform(5, 20, 100)
    })

    df_forecast = pd.DataFrame({
        'Date': forecast_dates,
        'Forecast': forecast
    })

    return df_actual, df_forecast

df_actual, df_forecast = simulate_data()

# Merge for plotting
fig = go.Figure()

# --- Actual ---
fig.add_trace(go.Scatter(
    x=df_actual['Date'], y=df_actual['Actual'],
    mode='lines+markers',
    name='Actual',
    line=dict(color='blue'),
    hovertemplate=
    'Date: %{x}<br>Actual: %{y:.2f}<br>Temp: %{customdata[0]:.1f}°C<br>Humidity: %{customdata[1]:.1f}%<br>Wind: %{customdata[2]:.1f} km/h',
    customdata=df_actual[['Temp', 'Humidity', 'WindSpeed']].values
))

# --- Predicted ---
fig.add_trace(go.Scatter(
    x=df_actual['Date'], y=df_actual['Predicted'],
    mode='lines',
    name='Predicted',
    line=dict(color='green', dash='dash'),
    hoverinfo='skip'
))

# --- Forecast ---
fig.add_trace(go.Scatter(
    x=df_forecast['Date'], y=df_forecast['Forecast'],
    mode='lines+markers',
    name='Forecast (Next 30 Days)',
    line=dict(color='orange'),
    hovertemplate='Date: %{x}<br>Forecast: %{y:.2f}'
))

# --- Separator Line ---
fig.add_vline(
    x=df_actual['Date'].iloc[-1],
    line=dict(color='gray', dash='dot'),
    annotation_text='Forecast Starts →',
    annotation_position='top right'
)

# Layout settings
fig.update_layout(
    title="Rainfall Prediction & Forecast",
    xaxis_title="Date",
    yaxis_title="Rainfall (mm)",
    hovermode="x unified",
    legend=dict(orientation='h'),
    template='plotly_white',
    height=600
)

# Display
st.plotly_chart(fig, use_container_width=True)
