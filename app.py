# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hULln8nG1Jr8ZA8-VxTiORVqSzXjktf
"""
import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# --------------------- Title ---------------------
st.set_page_config(page_title="Rainfall Prediction", layout="centered")
st.title("üåßÔ∏è Rainfall Prediction using LSTM")
st.markdown("Upload recent weather data (CSV format) to predict upcoming rainfall.")

# --------------------- Load model and preprocessors ---------------------
@st.cache_resource
def load_all_components():
    model = load_model("rainfall.h5")
    feature_scaler = joblib.load("feature_scaler.pkl")
    target_scaler = joblib.load("target_scaler.pkl")
    features = joblib.load("features.pkl")
    return model, feature_scaler, target_scaler, features

model, feature_scaler, target_scaler, features = load_all_components()

# --------------------- Upload file ---------------------
uploaded_file = st.file_uploader("üìÅ Upload your CSV", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # Convert 'date' to datetime if present
    if 'date' in df.columns:
        df['date'] = pd.to_datetime(df['date'])
        df.set_index('date', inplace=True)
    else:
        df.index = pd.date_range(start=datetime.today(), periods=len(df), freq='D')

    # Ensure numerical columns are correct dtype
    for col in ['rainfall', 'humidity', 'windspeed', 'temparature', 'cloud']:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')

    # --------------------- Feature Engineering ---------------------
    df["rainfall_lag_1"] = df["rainfall"].shift(1)
    df["rainfall_lag_3"] = df["rainfall"].shift(3)
    df["rainfall_lag_7"] = df["rainfall"].shift(7)
    df["humidity_lag_1"] = df["humidity"].shift(1)
    df["windspeed_lag_1"] = df["windspeed"].shift(1)
    df["temparature_lag_1"] = df["temparature"].shift(1)

    df["rainfall_rolling_3"] = df["rainfall"].rolling(window=3).mean()
    df["humidity_rolling_3"] = df["humidity"].rolling(window=3).mean()
    df["cloud_rolling_3"] = df["cloud"].rolling(window=3).mean()

    df["month"] = df.index.month
    df["dayofweek"] = df.index.dayofweek

    df.dropna(inplace=True)

    # --------------------- Feature Selection ---------------------
    missing_cols = [col for col in features if col not in df.columns]
    if missing_cols:
        st.error(f"Missing required columns after feature engineering: {missing_cols}")
    else:
        X = df[features]
        X_scaled = feature_scaler.transform(X)
        y_pred_scaled = model.predict(X_scaled)
        y_pred = target_scaler.inverse_transform(y_pred_scaled).flatten()

        df["Predicted_Rainfall"] = y_pred

        # --------------------- Results Table ---------------------
        st.subheader("üìä Predicted Rainfall Data (first 20 rows)")
        st.dataframe(df[features + ["Predicted_Rainfall"]].head(20))

        # --------------------- Visualization ---------------------
        st.subheader("üìà Rainfall Prediction Trend")
        fig, ax = plt.subplots(figsize=(12, 5))
        colors = ['#90ee90' if r < 20 else '#f4d03f' if r < 50 else '#e74c3c' for r in y_pred]
        sns.lineplot(x=np.arange(len(y_pred)), y=y_pred, marker="o", color='blue', ax=ax)
        ax.set_title("Predicted Rainfall Over Time")
        ax.set_xlabel("Data Point Index")
        ax.set_ylabel("Rainfall (mm)")
        ax.grid(True)
        st.pyplot(fig)

        # Explanation
        st.markdown("""
        **üß† Graph Explanation:**  
        - Green: Light Rain  
        - Yellow: Moderate Rain  
        - Red: Heavy Rain  
        """)

        # Actual vs Predicted (Optional)
        if "Actual_Rainfall" in df.columns:
            st.subheader("üìâ Actual vs Predicted Rainfall")
            fig2, ax2 = plt.subplots(figsize=(12, 4))
            ax2.plot(df["Actual_Rainfall"].values, label="Actual", linestyle='--', marker='o')
            ax2.plot(df["Predicted_Rainfall"].values, label="Predicted", linestyle='-', marker='x')
            ax2.set_title("Actual vs Predicted Rainfall")
            ax2.set_xlabel("Data Point Index")
            ax2.set_ylabel("Rainfall (mm)")
            ax2.legend()
            ax2.grid(True)
            st.pyplot(fig2)

        # Download predictions
        st.subheader("üì• Download Predictions")
        st.download_button(
            label="Download CSV with Predictions",
            data=df.to_csv(index=False),
            file_name="predicted_rainfall.csv",
            mime="text/csv"
        )
